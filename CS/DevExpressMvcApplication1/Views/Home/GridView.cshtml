@model System.Collections.IEnumerable
@{		 
	var grid = Html.DevExpress().GridView(
			settings => {
				settings.Name = "gvEditing";
				settings.KeyFieldName = "ProductID";
				settings.CallbackRouteValues = new { Controller = "Home", Action = "InlineEditingPartial" };
				settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Home", Action = "InlineEditingUpdatePartial" };
				settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;

				settings.CommandColumn.Visible = true;
				settings.CommandColumn.EditButton.Visible = true;

				settings.ClientSideEvents.EndCallback = "OnEndCallback";
				settings.ClientSideEvents.BeginCallback = "OnBeginCallback";

				settings.Columns.Add("ProductName");
				settings.Columns.Add(column => {
					column.FieldName = "CategoryID";
					column.Caption = "Category";

					column.ColumnType = MVCxGridViewColumnType.ComboBox;
					var comboBoxProperties = column.PropertiesEdit as ComboBoxProperties;
					comboBoxProperties.DataSource = NorthwindDataProvider.GetCategories();
					comboBoxProperties.TextField = "CategoryName";
					comboBoxProperties.ValueField = "CategoryID";
					comboBoxProperties.ValueType = typeof(int);
				});
				settings.Columns.Add("QuantityPerUnit");
				settings.Columns.Add(column => {
					column.FieldName = "UnitPrice";

					column.ColumnType = MVCxGridViewColumnType.SpinEdit;
					var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
					spinEditProperties.DisplayFormatString = "c";
					spinEditProperties.DisplayFormatInEditMode = true;
					spinEditProperties.MinValue = 0;
					spinEditProperties.MaxValue = 1000000;
					spinEditProperties.SpinButtons.ShowLargeIncrementButtons = true;
				});
				settings.Columns.Add(column => {
					column.FieldName = "UnitsInStock";

					column.ColumnType = MVCxGridViewColumnType.SpinEdit;
					var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
					spinEditProperties.NumberType = SpinEditNumberType.Integer;
					spinEditProperties.MinValue = 0;
					spinEditProperties.MaxValue = 10000;
				});
				settings.Columns.Add("Discontinued", MVCxGridViewColumnType.CheckBox);

				settings.RowValidating = (s, e) => {
					bool canUpdate = (bool)(ViewData["canUpdate"] ?? false);
					if (!canUpdate) {
						MVCxGridView g = s as MVCxGridView;
						g.JSProperties["cpRecordIsModified"] = true;
						e.RowError = "Recond has been updated by another user. Do you wish to override user changed?";
					}
				};
			});


	if (ViewData["EditError"] != null) {
		grid.SetEditErrorText((string)ViewData["EditError"]);
	}
}
@grid.Bind(Model).GetHtml()
